$version Generated by VerilatedVcd $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 R clk $end
  $var wire 32 T inst [31:0] $end
  $var wire 32 U pc [31:0] $end
  $var wire  1 S rst $end
  $scope module ysyx_23060229_top $end
   $var wire  1 R clk $end
   $var wire 32 ' imm [31:0] $end
   $var wire 32 T inst [31:0] $end
   $var wire 32 - mem_addr_in [31:0] $end
   $var wire 32 - mem_addr_out [31:0] $end
   $var wire 32 X mem_din [31:0] $end
   $var wire 32 . mem_dout [31:0] $end
   $var wire  2 * mem_ren [1:0] $end
   $var wire  2 ) mem_wen [1:0] $end
   $var wire 32 U pc [31:0] $end
   $var wire 32 W pc_tmp [31:0] $end
   $var wire  5 & rd [4:0] $end
   $var wire 32 V reg_din [31:0] $end
   $var wire  1 ( reg_wen $end
   $var wire  5 $ rs1 [4:0] $end
   $var wire  5 % rs2 [4:0] $end
   $var wire  1 S rst $end
   $var wire 32 + src1 [31:0] $end
   $var wire 32 , src2 [31:0] $end
   $var wire  7 # typ [6:0] $end
   $scope module muexu $end
    $var wire 32 . data_from_mem [31:0] $end
    $var wire 32 X data_to_mem [31:0] $end
    $var wire 32 ' imm [31:0] $end
    $var wire 32 U pc [31:0] $end
    $var wire 32 W pcout [31:0] $end
    $var wire 32 V reg_din [31:0] $end
    $var wire  1 S rst $end
    $var wire 32 + src1 [31:0] $end
    $var wire 32 , src2 [31:0] $end
    $var wire  7 # typ [6:0] $end
   $upscope $end
   $scope module myidu $end
    $var wire 32 ' imm [31:0] $end
    $var wire 32 T inst [31:0] $end
    $var wire  2 * mem_rd_quest [1:0] $end
    $var wire  2 ) mem_wr_quest [1:0] $end
    $var wire  5 & rd [4:0] $end
    $var wire  1 ( reg_wen $end
    $var wire  5 $ rs1 [4:0] $end
    $var wire  5 % rs2 [4:0] $end
    $var wire  7 # typ [6:0] $end
   $upscope $end
   $scope module mymem $end
    $var wire 32 Y ADDR_WIDTH [31:0] $end
    $var wire 32 Z DATA_WIDTH [31:0] $end
    $var wire 32 - addr_in [31:0] $end
    $var wire 32 - addr_out [31:0] $end
    $var wire  1 R clk $end
    $var wire 32 X din [31:0] $end
    $var wire 32 . dout [31:0] $end
    $var wire 32 T inst [31:0] $end
    $var wire 32 U pc [31:0] $end
    $var wire  2 * ren_mem [1:0] $end
    $var wire  1 S rst $end
    $var wire 32 / tmp_out1 [31:0] $end
    $var wire 32 0 tmp_out2 [31:0] $end
    $var wire 32 1 tmp_out4 [31:0] $end
    $var wire  2 ) wen_mem [1:0] $end
   $upscope $end
   $scope module myreg $end
    $var wire 32 [ ADDR_WIDTH [31:0] $end
    $var wire 32 Y DATA_WIDTH [31:0] $end
    $var wire 32 2 Reg[0] [31:0] $end
    $var wire 32 < Reg[10] [31:0] $end
    $var wire 32 = Reg[11] [31:0] $end
    $var wire 32 > Reg[12] [31:0] $end
    $var wire 32 ? Reg[13] [31:0] $end
    $var wire 32 @ Reg[14] [31:0] $end
    $var wire 32 A Reg[15] [31:0] $end
    $var wire 32 B Reg[16] [31:0] $end
    $var wire 32 C Reg[17] [31:0] $end
    $var wire 32 D Reg[18] [31:0] $end
    $var wire 32 E Reg[19] [31:0] $end
    $var wire 32 3 Reg[1] [31:0] $end
    $var wire 32 F Reg[20] [31:0] $end
    $var wire 32 G Reg[21] [31:0] $end
    $var wire 32 H Reg[22] [31:0] $end
    $var wire 32 I Reg[23] [31:0] $end
    $var wire 32 J Reg[24] [31:0] $end
    $var wire 32 K Reg[25] [31:0] $end
    $var wire 32 L Reg[26] [31:0] $end
    $var wire 32 M Reg[27] [31:0] $end
    $var wire 32 N Reg[28] [31:0] $end
    $var wire 32 O Reg[29] [31:0] $end
    $var wire 32 4 Reg[2] [31:0] $end
    $var wire 32 P Reg[30] [31:0] $end
    $var wire 32 Q Reg[31] [31:0] $end
    $var wire 32 5 Reg[3] [31:0] $end
    $var wire 32 6 Reg[4] [31:0] $end
    $var wire 32 7 Reg[5] [31:0] $end
    $var wire 32 8 Reg[6] [31:0] $end
    $var wire 32 9 Reg[7] [31:0] $end
    $var wire 32 : Reg[8] [31:0] $end
    $var wire 32 ; Reg[9] [31:0] $end
    $var wire  5 & addr_in [4:0] $end
    $var wire  5 $ addr_out1 [4:0] $end
    $var wire  5 % addr_out2 [4:0] $end
    $var wire  1 R clk $end
    $var wire 32 V din [31:0] $end
    $var wire 32 + dout1 [31:0] $end
    $var wire 32 , dout2 [31:0] $end
    $var wire 32 U pc [31:0] $end
    $var wire 32 W pcin [31:0] $end
    $var wire  1 S rst $end
    $var wire  1 ( wen $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b1111111 #
b00000 $
b00000 %
b00000 &
b00000000000000000000000000000000 '
0(
b00 )
b00 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
1R
1S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
b00000000000000000000000000100000 Y
b00000000000000000000000000001000 Z
b00000000000000000000000000000101 [
#1
0R
#2
b0000000 #
b00001 $
b00001 &
b00000000000000000000000000000001 '
1(
b00000000000000000000000000000001 -
b11111111111111111111111110000000 /
b00000000000000000001000010000000 0
b10010011000000000001000010000000 1
1R
b00000000000100001000000010010011 T
#3
0R
#4
1R
#5
0R
#6
1R
#7
0R
0S
b00000000000000000000000000000001 V
b00000000000000000000000000000100 W
#8
b00111 &
b00000000000000000000000000000010 '
b00000000000000000000000000000001 +
b00000000000000000000000000000011 -
b00000000000000000000000000000000 /
b11111111111111111001001100000000 0
b00100000100000111001001100000000 1
b00000000000000000000000000000001 3
1R
b00000000001000001000001110010011 T
b00000000000000000000000000000100 U
b00000000000000000000000000000011 V
b00000000000000000000000000001000 W
#9
0R
#10
b00111 $
b11111111111111111111111111111111 '
b00000000000000000000000000000011 +
b00000000000000000000000000000010 -
b00000000000000000000000000010000 /
b00000000000000000000000000010000 0
b10000011100100110000000000010000 1
b00000000000000000000000000000011 9
1R
b11111111111100111000001110010011 T
b00000000000000000000000000001000 U
b00000000000000000000000000000010 V
b00000000000000000000000000001100 W
#11
0R
#12
b0000001 #
b11111 $
b11110 &
b00000000000000000000000000011000 '
b11 *
b00000000000000000000000000000000 +
b00000000000000000000000000011000 -
b00010101000101000001001100010010 .
b00000000000000000000000000010010 /
b00000000000000000001001100010010 0
b00010101000101000001001100010010 1
b00000000000000000000000000000010 9
1R
b00000001100011111010111100000011 T
b00000000000000000000000000001100 U
b00010101000101000001001100010010 V
b00000000000000000000000000010000 W
#13
0R
#14
b0000011 #
b11110 %
b00000 &
b00000000000000000000000000011100 '
0(
b11 )
b00 *
b00010101000101000001001100010010 ,
b00000000000000000000000000011100 -
b00000000000000000000000000000000 .
b11111111111111111111111110001000 /
b00000000000000000111011110001000 0
b01010101011001100111011110001000 1
b00010101000101000001001100010010 P
1R
b00000001111011111010111000100011 T
b00000000000000000000000000010000 U
b00000000000000000000000000000000 V
b00000000000000000000000000010100 W
b00010101000101000001001100010010 X
#15
0R
#16
b1111110 #
b00000 $
b00000 %
b00000000000000000000000000000000 '
b00 )
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b11111111111111111111111110010011 /
b11111111111111111000000010010011 0
b00000000000100001000000010010011 1
1R
b00000000000000000000000001110011 T
b00000000000000000000000000010100 U
b00000000000000000000000000000000 X
#17
0R
#18
1R
#19
0R
#20
1R
#21
0R
#22
1R
#23
0R
#24
1R
#25
0R
#26
1R
#27
0R
#28
1R
#29
0R
